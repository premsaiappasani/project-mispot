<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" >
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Getting Started | MiSpot</title>
    <link rel="icon" href="mispot.ico" type="image/x-icon" />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <style type="text/css">
      body {
        background: #ddd;
      }
      a {
        color: #f4d504 !important;
      }
      ul li a:hover {
        background: #555 !important;
      }
      @media (min-width:768px){
      #box {
        height: 84vh; overflow: scroll;
      }
    }
    </style>
  </head>
  <body>
    <nav
      class="navbar navbar-expand-lg navbar-dark bg-dark"
      style="position: relative; color: #f4d504 !important"
    >
      <div class="container-fluid">
        <img src="mispotimg.png" style="height: 50px; display: inline" />
        <a
          class="navbar-brand"
          href="https://mismatchesspotted.el.r.appspot.com/home"
          style="
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: #f4d504 !important;
          "
          ><div>MiSpot</div>
          <div style="font-size: 0.3em">Mismatches Spotted</div></a
        >
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNavDropdown"
          aria-controls="navbarNavDropdown"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div id="logreg" style="position: absolute; right: 60px">
          <span class="nav-item"> </span>
        </div>
        <div class="collapse navbar-collapse bg-dark" id="navbarNavDropdown">
          <ul class="navbar-nav">
            <li class="nav-item">
              <a
                class="nav-link active"
                aria-current="page"
                href="https://mismatchesspotted.el.r.appspot.com/home"
                >Home</a
              >
            </li>
            <li>
              <a
                class="nav-link"
                href="https://mismatchesspotted.el.r.appspot.com/login"
                >Login</a
              >
            </li>
            <li>
              <a
                class="nav-link"
                href="https://mismatchesspotted.el.r.appspot.com/signup"
                >Register</a
              >
            </li>
            <li class="nav-item dropdown">
              <a
                class="nav-link dropdown-toggle"
                href="#"
                id="navbarDropdownMenuLink"
                role="button"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                Docs
              </a>
              <ul
                class="dropdown-menu"
                aria-labelledby="navbarDropdownMenuLink"
                style="background-color: #212529 !important"
              >
                <li>
                  <a
                    class="dropdown-item"
                    href="https://mismatchesspotted.el.r.appspot.com/demo"
                    >Demo</a
                  >
                </li>
                <li>
                  <a
                    class="dropdown-item"
                    href="https://mismatchesspotted.el.r.appspot.com/start"
                    >Getting Started</a
                  >
                </li>
                <li>
                  <a
                    class="dropdown-item"
                    href="https://mismatchesspotted.el.r.appspot.com/pricing"
                    >Pricing</a
                  >
                </li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </nav>
      <div class="container-fluid">
        <div class="row">
          
          <div class="col ">
            <nav id="navbar box2"  style="padding-top: 10px;">
              <ul class="nav flex-column card" style="background-color: black;">
               <header>TOC</header>
                <li class="nav-item">
                  <a class="nav-link introduction" href="#Introduction">Introduction</a>
                </li>
                <li class="nav-item">
                 <a class="nav-link layout" href="#Layout">Data you Send</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link content" href="#Content">Verification</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link components" href="#Components">Logistics</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link reference" href="#Reference">Data you Get</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link reference" href="#Bestway">Best ways to excell</a>
                </li>
            </ul>
         </nav>
        </div>
            
      <div class="col-md-9" id="box">
        <main id="main-doc">    
          <div class="head-box">
            <h1>Getting Started with MiSpot</h1>
          </div>
          
            <section class="main-section" id="Introduction">
              <header><h2>Introduction</h2></header>
                <article>
                  <p>MiSpot is a software solution, which helps in reducing the product mismatches in the e-commerce industry. Checkout demo <a href="https://Mismatchesspotted.el.r.appspot.com/demo">here</a> before getting started.</p>
                  <h6>Here's what you need to do in brief:</h6>
                  <p>
                    <ul>
                      <li><b>Sign up now and Get an API key: </b>You need to send this Key along with the data you send.</li>
                      <li><b>Add a verify button: </b>Ask the seller to verify the product before shipping.</li>
                      <li><b>Make sure, you send the information in the format shown <a href="#final">here</a> to MiSpot: </b>Send the required information for verification along with your API key every time a seller hits verify button.</li>
                      <li><b>Redirect the seller: </b>Whenever you send a post request to MiSpot as shown below, you will be getting a link as response. Redirect the seller to that link.</li>
                      <li><b>Get the data: </b>Post verification, MiSpot will post all the computed data to the web address given by you.</li>
                      <li><b>Use the data wisely: </b>Use the industry unique parameters sent by MiSpot wisely to rule the industry.</li>
                    </ul>
                  </p>
                  <p>Follow the steps below to get started with MiSpot</p>
                </article>
           </section>
        
        <section class="main-section" id="Layout">
          <header><h2>Get all the Information needed</h2></header>
          <p>You need to send the product data to us at https://mismatchesspotted.el.r.appspot.com/api/ . The body of your <a href="https://en.wikipedia.org/wiki/POST_(HTTP)">POST</a> request should contain all the information you need to send to MiSpot. Follow the steps below to know what is that data and how can you send it.</p>
          <p>First of all, Join us by selecting a plan <a href="https://mismatchesspotted.el.r.appspot.com/signup">here</a> to create an account on MiSpot.</p>
          <p>Next, Login using your credentials <a href="https://mismatchesspotted.el.r.appspot.com/signup/1">here</a>.</p>
          <h3>API Key</h3>
          <p>Note the API Key provided on the profile page which renders right after you login. You will need it everytime when you send information to MiSpot. API key is a unique, secret 10-digit number, which describes your identity everytime we process your request.</p>
          <p>Include the API key in the data set you send.</p> 
          <article>
        <pre>
          <code>
            {
            key = '1234567890',
          }</code>
        </pre>
       
          <h3 id="redurl">Post URL</h3>
              <p>Send the url, where you want MiSpot to send the data. Make sure, you have your server live and a Port to get the data. </p>
        <pre>
          <code>
            {
            key = '1234567890',
            redUrl = 'https://api.mycompany.com/getData',
          }</code>
        </pre>
        <h3>Name of the product</h3>
        <p>Send the name of your product which needs to get verified. For faster and accurate verification, if you have your product in this <a href="https://tech.amikelive.com/node-718/what-object-categories-labels-are-in-coco-dataset/">list</a>, it is always recommended to send the keywords in that list and avoid spelling mismatches.</p>
  <pre>
    <code>
      {
      key = '1234567890',
      redUrl = 'https://api.mycompany.com/getData',
      object = 'bottle',
    }</code>
  </pre>
  <h3>Order ID</h3>
  <p>Send the Order ID to distinguish the order's data over other orders.</p>
<pre>
<code>
{
key = '1234567890',
redUrl = 'https://api.mycompany.com/getData',
object = 'bottle',
order = '421-4562-619',
}</code>
</pre>
<h3>Seller ID</h3>
  <p>Send the Seller ID to get exclusive data about the seller like <a href="https://mismatchesspotted.el.r.appspot.com/gi">Genuinity Index</a> of the Seller.</p>
<pre>
<code>
{
key = '1234567890',
redUrl = 'https://api.mycompany.com/getData',
object = 'bottle',
order = '421-4562-619',
seller = '100-201',
}</code>
</pre>
<h3>Product ID</h3>
  <p>Send the Product ID to get <a href="https://mismatchesspotted.el.r.appspot.com/gi">Genuinity Index</a> of the Product.</p>
<pre>
<code>
{
key = '1234567890',
redUrl = 'https://api.mycompany.com/getData',
object = 'bottle',
order = '421-4562-619',
seller = '100-201',
product = '213-4589',
}</code>
</pre>
<h3>Barcode</h3>
  <p>Send the Barcode, which will be useful while MiSpot verifies the product. Although it is not mandatory, It is highly recommended to send the barcode data if available.</p>
<pre>
<code>
{
key = '1234567890',
redUrl = 'https://api.mycompany.com/getData',
object = 'bottle',
order = '421-4562-619',
seller = '100-201',
product = '213-4589',
barcode = '9848235684143',
}</code>
</pre>
<h3>Send Data</h3>
  <p>Send a http POST request at https://mismatchesspotted.el.r.appspot.com/api with a data object (shown above).</p>
  <p>In return, you will get a unique link where you need to redirect the seller. Look at the code below to know how to create a http post request to us in node.js.</p>
<pre>
<code id="final">
const http = require('http')
<!-- const data = JSON.stringify({
  key = 1234567890,
  redUrl = 'https://api.mycompany.com/getData',
  object = 'bottle',
  order = '421-4562-619',
  seller = '100-201',
  product = '213-4589',
  barcode = '9848235684',
  })
const options = {
  hostname: 'http://localhost:8080/api',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': data.length
  }
}
const req = https.request(options, res => {
  console.log(`statusCode: ${res.statusCode}`)

  res.on('data', d => {
    process.stdout.write(d)
  })
})
req.on('error', error => {
  console.error(error)
})
req.write(data)
req.end() -->
const data = JSON.stringify({
  &emsp; key : 1234567890,
  &emsp;redUrl : 'https://api.mycompany.com/getData',
  &emsp; object : 'bottle',
  &emsp; order : '421-4562-619',
  &emsp; seller : '100-201',
  &emsp; product : '213-4589',
  &emsp; barcode : '9848235684',
  })

const options = {
  &emsp; host: 'localhost',
  &emsp; port: '8080',
  &emsp; method: 'POST',
  &emsp; path: '/api',
  &emsp; headers: {
    &emsp;&emsp;'Content-Type': 'application/json',
    &emsp;&emsp;'Content-Length': data.length
  }
}

const req = http.request(options, res => {
  &emsp; console.log(`statusCode: ${res.statusCode}`)
  &emsp; res.on('data', d => {
    &emsp;&emsp; process.stdout.write(d)
  &emsp; })
})

req.on('error', error => {
 &emsp; console.error(error)
})

req.write(data)
req.end()
</code>
</pre>
<h3 id="Content">What to do now ?</h3>
<p>Now you have the link where the seller has to be redirected. Once the seller completes the verification of the prouct, MiSpot will send the verification status to the <a href="#redurl">url</a> using http POST request, where you wanted MiSpot to post the data, along with other data like the image MiSpot captured, Genuinity index of the product and seller etc..</p>
<h3 id="Components">Genuinity Index</h3>
<p>A new way and a better way of representing the genuinity of a product or a seller. Usually all the E-Commerce industries use rating given by the customers and return of a product to know how good a seller is or to know the quality of the product. As anyone can review an product their might be a chance of misusage of it. Even the ratings can be biased.</p>
<p>
  To avoid this type of situations, MiSpot uses the verification data and returns data combinedly to create a new variable which rates a seller or a product over a scale of 0 to 10. Thus it uses real time verification to decide genuinity index, thus it can't be biased and gives a clear idea.
</p>
<p>Genuintiy Index is calculated by following formula.</p>
<h3>Example code to accept the POST request</h3>
<p>You can use the below code to accept the information you get from POST request MiSpot send.</p>
<code>
  <pre>

    const express = require("express");
    const app = express();
    app.post('/getData',(req,res)=>{
      &emsp; console.log(req.data);
    });
  </pre>
</code>
<h3 id="Reference">Data You Get</h3>
<p>MiSpot send the following information to you in the body of the POST request when object detection is used.</p>
<code>
  <pre>

    {
      &emsp; object: 'bottle',
      &emsp; orderId: '421-4562-619',
      &emsp; time: 59,
      &emsp; image: '{image as data url}',
      &emsp; verification: 1,
      &emsp; percent: 74,
      &emsp; genuinity_prod: 8,
      &emsp; genuinity_seller: 7
    }
  </pre>
</code>

<p>
  <ul>
    <li>object - Object that is detected from the seller's camera.</li>
    <li>orderId - Order id of the particular order. so that, you can differentiate it with other orders.</li>
    <li>time - Time taken for verification by the seller.</li>
    <li>image - image we caputured whil verifing the product. You can send it to the customer.</li>
    <li>verification - It has the number to represent the verification status.
        <ul>
          <li>1 is given if verification is successful.</li>
          <li>0 is given if verification is not successful. In this case you can take required action. You also get the image of the product sent by the seller.</li>
        </ul>
    </li>
    <li>percent - percentage that represent how much the product resembles according to description according to the machine learing model MiSpot used.</li>
    <li>genuinity_prod - genuinity index of the product.</li>
    <li>genuinity_seller - genuinity index of the seller.</li>
  </ul>

</p>
<h3>Accessing the elements in the body</h3>
<p>You can access the elements in the body of the request as shown.</p>
<code>
  <pre>

    const express = require("express");
    const app = express();
    app.post('/getData',(req,res)=>{
      &emsp; let verification_status = req.body.verification;
      &emsp; console.log('verification status : ', verification_status);
      &emsp; let object_detected = req.body.object;
      &emsp; console.log('object detected : ', object_detected);
      &emsp; let Order_id = req.body.orderId;
      &emsp; console.log('order id : ',Order_id);
      &emsp; let percent_of_verification = req.body.percent;
      &emsp; console.log('percentage of verification : ', percent_of_verification);
      &emsp; let time_taken_for_verification = req.body.time;
      &emsp; console.log('time taken by the seller to verify : ', time_taken_for_verification);
      &emsp; let genuinity_of_prod = req.body.genuinity_prod;
      &emsp; console.log('new genuinity index of the product : ', genuinity_of_prod);
      &emsp; let genuinity_of_seller = req.body.genuinity_seller;
      &emsp; console.log('new genuinity index of the seller : ',genuinity_of_seller);
    });
  </pre>
</code>
<h6>Output of the above code</h6>
<code>
  <pre>
    
    &emsp; verification status : 1
    &emsp; object detected : bottle
    &emsp; order id : 421-4562-619
    &emsp; percentage of verification : 74
    &emsp; time taken by the seller to verify : 59s
    &emsp; new genuinity index of the product : 8
    &emsp; new genuinity index of the seller : 7
  </pre>
</code>
<p>MiSpot send the following information to you in the body of the POST request when barcode scanner is used.</p>
<code>
  <pre>

    {
      &emsp; barcode: '9848235684',
      &emsp; orderId: '421-4562-619',
      &emsp; time: 59,
      &emsp; image: '{image as data url}',
      &emsp; verification: 1,
      &emsp; genuinity_prod: 8,
      &emsp; genuinity_seller: 7
    }
  </pre>
</code>

<p>
  <ul>
    <li>barcode - Barcode that is detected from the seller's camera.</li>
    <li>orderId - Order id of the particular order. so that, you can differentiate it with other orders.</li>
    <li>time - Time taken for verification by the seller.</li>
    <li>image - image we caputured whil verifing the product. You can send it to the customer.</li>
    <li>verification - It has the number to represent the verification status.
        <ul>
          <li>1 is given if verification is successful.</li>
          <li>0 is given if verification is not successful. In this case you can take required action. You also get the image of the product sent by the seller.</li>
        </ul>
    </li>
    <li>genuinity_prod - genuinity index of the product.</li>
    <li>genuinity_seller - genuinity index of the seller.</li>
  </ul>
</p>
<h3>Accessing the elements in the body</h3>
<p>You can access the elements in the body of the request as shown.</p>
<code>
  <pre>

    const express = require("express");
    const app = express();
    app.post('/getData',(req,res)=>{
      &emsp; let verification_status = req.body.verification;
      &emsp; console.log('verification status : ', verification_status);
      &emsp; let barcode_detected = req.body.barcode;
      &emsp; console.log('barcode detected : ', barcode_detected);
      &emsp; let Order_id = req.body.orderId;
      &emsp; console.log('order id : ',Order_id);
      &emsp; let time_taken_for_verification = req.body.time;
      &emsp; console.log('time taken by the seller to verify : ', time_taken_for_verification);
      &emsp; let genuinity_of_prod = req.body.genuinity_prod;
      &emsp; console.log('new genuinity index of the product : ', genuinity_of_prod);
      &emsp; let genuinity_of_seller = req.body.genuinity_seller;
      &emsp; console.log('new genuinity index of the seller : ',genuinity_of_seller);
    });
  </pre>
</code>
<h6>Output of the above code</h6>
<code>
  <pre>
    
    &emsp; verification status : 1
    &emsp; barcode detected : 9848235684
    &emsp; order id : 421-4562-619
    &emsp; time taken by the seller to verify : 59s
    &emsp; new genuinity index of the product : 8
    &emsp; new genuinity index of the seller : 7
  </pre>
</code>
<h3 id="Bestway">How you can excell the E-Commerce using MiSpot ?</h3>
<p>Implementing MiSpot and sending the verification status to the customer before the customer accepts his package will build and ensure the trust between the E-Commerce companies and customers and helps the E-Commerce comapnies to grow. You can also send the image of the product shipped. So that he can conform he is getting what he ordered. He can also take necessary action if something goes wrong.</p>
<p>
Although ecommerce sales increased over the past years but most of the people are preferring offline because they can check their product while buying.So, MiSpot will solve this problem of verification and changes people opinion on E-Commerce.
</p>
<p>
<h6>How MiSpot makes your E-Commerce plotform unique...</h6>
<ul>
  <li>Most of the E-Commerce companies doesn’t check for mismatches but mispot verifies the product during the verification stage.</li>
  <li>E-Commerce Companies check the genuinity of the seller based on number of returns but mispot checks genuinity based on genuinity index which ensures customers trust on E-Commerce</li>
  <li>Mispot applies real time verification on product.</li>
</ul>



</p>
<h5>Awesome!!!!!. You did it!!!!. Feel free to send feedback to us anytime <a href="https://mismatchesspotted.el.r.appspot.com/feedback">here</a>.</h5>


          </article>    
        </section>
        
          
          </main>
                      
        </div>
       </div>
      </div>
      <style>
        @import url('https://fonts.googleapis.com/css?family=Pontano+Sans');

html, body {
  font-family: 'Pontano Sans', sans-serif;
  font-size: 18px;
  background-color: #fff;
  color: #000;
  letter-spacing: 1px;
}

p a{
  color: #000 !important;
}

/*------------NAV BAR----------------*/

#navbar {
  /*background-color: #000;*/
  height: 96%;
  top: 10px;
  position: fixed;
  width: 22%;
}

.nav header {
  display: block;
  text-align:center;
  margin: 0 10px;
  padding: 5px;
  border-bottom: 1px solid #30336b;
  font-size: 120%;
  font-weight: thin;
  color: #95a5a6;
}

.nav-link:link {
  color: #30336b;
  margin-top: 10px;
  padding-left: 30px;
}
.nav-link:hover,
.nav-link:active {
  color: #fff;
  background-color: #2c3e50;
  transition: 0.3s;
}

.nav-link:visited {
  color: #fd79a8;
}

.head-box {
  background-color: #2c3e50;
  color: #fff;
  padding: 20px;
  text-align: center;
  margin-top: 10px;
}

/*-------------BODY-----------*/

header {
  margin-top: 20px;
}

h2 {
  font-weight: bold;
  color: #130f40;
}

h3 {
  margin-top: 20px;
  padding-left: 15px;
  color: #30336b;
}

p {
  font-size: 90%;
  line-height: 1.5;
  padding-left: 30px;
  padding-right: 20px;
  text-align: justify;
}

section article {
  padding-right: 20px;
}

article li {
  font-size: 80%;
  margin-left: 20px;
}

/*---CODE SECTION---*/

pre {
  display: inline-block;
  background-color: #34495e;
  color: #fff;
  margin-left: 40px;
  padding: 0 0 20px 30px;
  font-size: 80%;
  width: 90%;
  white-space: pre-line;

}

/*-------FOOTER------*/

hr {
  border: 0.5px solid;
  color: #34495e;
}

a {
  color: #8e44ad;
  font-weight: bold;
}

a:hover {
  text-decoration: none;
  color: #e84393;
}

.fa {
  font-size: 22x;
}

footer {
  text-align: center;
}

footer p {
  text-align: center;
  margin-bottom: 10px;
  font-size: 80%;
}

/*---------RESPONSIVE--------*/

@media only screen and (max-width: 768px) {
  #navbar {
    position: relative;
    width: 100%;
    margin-bottom: 20px;
    padding-bottom: 10px;
    text-align: center;
  }
}

@media only screen and (max-width: 480px) {
  pre {
    font-size: 60%;
    max-width: 80%;
    margin-left: 30px;
    padding: 0 10px 10px 20px;
  }
}
      </style>
  </body>
</html>
